	public void addByOrder(HeroNode heroNode){
	HeroNode temp=head;
	boolean flag=false;
	while(true){
	 if(temp.next==null){
	break;//已经到链表的最后；
	}
	if (temp.next.no>heroNode.no){
	break;//找到要插入的位置
	}
	else if (temp.next.no==heroNode.no){
	flag=true;
	break;
	}


	}
	temp=temp.next;
	//通过flag的值判断是否要插入数据
	if（flag==true）{
	System.out.printf("要插入的数据%d已经存在"，heroNode.no)
	}else if（）{
	heroNode.next=temp.next;
	temp.next=heroNode;
	}
	}
	public void update(HeroNode newheroNode){
		HeroNode temp=head.next;
	boolean flag=false;
	if (head.next==null){
	System.out.printf("链表为空，没有数据");
	break;
	}
	while (true){
                    if(temp==null){
                      //已经到链表的最后
                break;
                  }
            if (temp.no==newHeroNode.no){
flag=true;
break;
}
temp=temp.next;
	}
           if (flag){
           temp.name=newHeroNode.name           
           temp.nickname=newHeroNode.nickname;
 }else{
System.out.printf("没有编号为%d的英雄信息"，newHeroNode.no);

}
	}
public void del(int no){
HeroNode temp=head;
boolean flag=false;
while(true){
if (temp==null){
//表示已经到链表的最后
break;
}
if (temp.next.no==no){
//表示已经找到要删除的节点，待删除的节点是temp的下一个节点
flag=true；
break；
}
temp=temp.next;
if(flag){
temp.next=temp.next.next;
}else{
System.out.printf("%d节点不存在\n",no);
}
}
}
//统计节点中的有效个数
//head表示头节点，
public static int getLength(HeroNode head){
if (head.next==null){
return 0;
}
HeroNode cur=head.next;
int length=0;
while(cur=null){
length++;
cur=cur.next;
}
return length
}
//返回倒数第k个节点链表的信息
public static HeroNode findLastIndex(HeroNode head,int index){
if (head.next==null){
return null;
}
int size=getlength(head);
if (index<=0||size>0){
return null;
}
HeroNode cur=head.next;
for (int i=0;i<size-index;i++){
cur=cur.next;
}
return cur;
}
//实现单链表的翻转
public void reverseList(HeroNode head){
if（head.next==null||head.next.next==null）{
return;
}
HeroNode cur=head.next;//设置一个暂时的节点，用于遍历；
HeroNode next=null;//设置一个临时的链表
HeroNode reverseHead=new HeroNode（0，"",""）;
while(cur!=null){
next=cur.next;
cur.next=reverseHead.next;
reverHead.next=cur;
cur=next;
}
head.next=reverseHead.next;
}
//逆序打印列表节点
public static void reversePrint(HeroNode head){
Stack<HeroNode> stack=new Stack<HeroNode>（）;
HeroNode cur=head.next;
while(cur!=null){
stack.push(cur);
cur=cur.next;
}
//出栈
while(stack.size()>0){

}
}
//创建一个环形链表
class CircleLinkedList{
private Boy first=null;
public void addBoy(int nums){
if (nums<1){
System.out.println("nums数据错误，不能创建环形链表");
return;
}
Boy curBoy=null;
for (int i=1;i<=nums;i++){
Boy boy=new Boy(i);
if (i==1){
first=boy;
first.setNext(first);
curBoy=first;
}else{
    curBoy.getNext(boy);
  boy.setNext(first);
curBoy=boy;
}
}
}
//遍历环形链表
public void showBoy(){
Boy curBoy=first;
if (fisrt==null){
System.out.println("环形链表为空，没有小孩")；
reutrn;
}else{
System.out.printf("小孩的编号为%d\n",curBoy.getNo());
if (curBoy.getNext()==first){
break;
}
curBoy=curBoy.getNext();
}
--->约瑟夫问题
public void cuontBoy(int startNo,int countNo,int nums){
  Boy helper=first;
  while(true){
if (helper.getNext()==first){
break;
}
helper=helper.getNext();
}
for (int i=0;i<startNo-1;i++){
helper=helper.getNext();
first=first.getNext();
}
while(true){
if （helper==first）{
break;
}
for (int j=0;j<countNum-1:;j++){
first=first.getNext();
helper=helper.getNext();
}
System.out.printf("小孩%d\n已经出圈"，first.getNo);
first=first.getNext();
helper.setNext(fitst);
}
System.out.printf("最后的小孩%d\n",first.getNo);
}
----------------------------------------------------------------------------------------
用数组模拟栈
class ArrayStack{
private int top=-1;
private int maxSize;
private int[] stack;
public Stack(int maxSize){
this.maxSize=maxSize;
stack=new int[maxSIze];
}
//判断栈是否满
public void isFull(){
return  top==maxSize-1;
}
//判断栈是否为空
public void isEmpty(){
return top==-1;
}
//入栈
public void push(int value){
if (isFull()){
System.out.println("栈满");
reutrn;
}
top++
stack[top]==value;
}
// 出栈
public int pop(){
if (isEmpty){
throw new RuntimeException("栈空，没有数据");
}
int value=stack[top];
top--;
return top;
}
//遍历栈
public void list(){
if(isEmpty){
System.out.println("栈空，没有数据")；
}
for (int i=top;i>=0;i--){
System.out.printf("stack[%d]=%d",i,stack[i]);
}
}
}
--------------------------------------------------------
中缀表达式生成计算器
String espression="3+2*6-2";
ArrayStack2 numStack=new ArrayStack(10);
ArrayStack2 operStack=new ArrayStack(10);
int res=0;
int num1=0;
int num2=0;
char ch=' ';
int oper=0;
String keepNum="";
while(true){
//如果是操作符
ch =expression.subString(index,index+1).charAt(0);
if (operStack.isOper(ch)){//如果是操作符
if(!operStack.isEmpty()){//如果操作栈不为空
if(operStak.proprity(ch)<=operStack.proprity(operStack.peek()//此方法返回栈顶元素)){
num1=numberStack.pop();
num2=numberStack.pop();
oper=operStack.pop();
res=numberStack.cal(num1,num2,oper);
numberStack.push(res);
operStack.push(ch);
} else{
operStack.push(ch);
}
}
else{
//处理多位数的压入操作
//numberStack.push(ch-48);
keepNum+=ch;
if (index==operStack.length()-1){
numberStack.push(Integer.parseInt(keepNum));
}else{
if(operStack.isOper(expression.substring(index+1,index+2).charAt(0))){
numberStack.push(Integer.parseInt(keepNum));
keepNum="";
}
}
}
index++;
if(index>=expression.length()){
break;
}
}
while(true){
if(operStack.isEmpty()){
break;
}
num1=numberStack.pop();
num2=numberStack.pop();
oper=operStack.pop;
res=numberStack.cal(num1,num2,oper);
numberStack.push(res)
}
System.out.printf("表达式%s=%d",expression,numberStack.pop());
}
--------------------------------------------
完成逆波兰运算表达式的运算
public static List<String>getSuffixExpression(String suffixExpression){
   
List<String> list=new ArrayList<String>(); 
 String[]  split=suffixExpression.split(" ");
for (String ele:split){
list.add(ele);
}
return list;
}
public static int calculate(List<String> ls){
Stack<String> stack=new Stack<String>();
for (String item:ls){
if (item.catchs("//d+")){
stack.push(item);
} else{
  int num2=Integer.parseInt(stack.pop());
 int num1=Integer.parseInt(stack.pop());
int res=0;
if (items.equals("+")){
res=num1+num2;
}else if (item.equals("-")){
res=num1-num2;
} else if (item.equals("*")){
res=num1*num2;
} else if ("/"){
res=num1/num2;
} else{
throw new RuntimeExpression("输入的操作符有误")；
}
stack.push(res+"");
}
}
System.out.println("逆波兰表达式的值是"+Integer.parseInt(stack.pop())));
} 
----------------------------------------
中缀表达式转换成中缀数组的方法的方法
public static List<String> toInfixExpressionList(String s){
 List<String> ls=new  ArrayList<String>(); 
String str;//用于拼接
char c=;
int i=0;
do{
//如果是一个非数字，则直接压入到栈中
if ((c=charAt(i))<48||(c=charAt(i))>57){
ls.add(""+c.charAt(i));
i++;
} else{//是一个数字，则需要考虑多位数的情况
str="";将str置空
while（(c=charAt(i))>=48&&(c=charAt(i))<=57）{
str+=c;
i++;
}
ls.add(str);
}
}while(i<=s.length);
return ls;
}
----------------------------------------
回溯之迷宫问题
public static boolean setWay(int[][] map,int i, int j){
if (map[[6][5]==2){
return true;
}  else{
   if (map[i][j]==0){
   map[i][j]==2;//假设该点已经走过
      else if (setWay(map,i+1,j)){
      return true;
   } else if (setWay(map,i,j+1)){
   return true;
   }else if (setWay(map,i-1,j)){
   reutrn true;
   }else if (setWay(map,i,j-1)){
     return true;
   }
}  else{
    map[i][j]=3;
    return false;
}
}
}
---------------------------------------------------
递归：回溯问题之八皇后问题
//摆放第n个皇后
private void check(int n){
if (n==max){  //表明第n个皇后已经摆放好了
print();
return;
}
for (int i=0;i<max;i++){
array[n]=i;
if (judge(n)){
check(n+1);
}
}
}
//  判断八皇后的位置是否冲突
private boolean judge(int n){
for (int i=0;i<n;i++){
if (array[n]==array[i]||Math.abs(n-i)==Math.abs(array[n]-array[i])){
return false;
}
return true;
}
}


//输出八皇后的摆放
public void print(){
 for (int i=0;i<array.length;i++){
 System.out.print(array[i]+"");
 }
 System.out.println();
}
-----------------------------------
冒泡排序算法的实现及优化
public class BullbeSort(){
   public static void main(String[] args){
   int[] arr=new int[]{-1,9,3,10,-3};
   int temp=0;
   boolean flag=false;
   for (int i=0;i<arr.length-1;i++){
      for (int j=0;j<arr.length-1-i;j++){
      if (arr[j]>arr[j+1]){
      flag=true;
      temp=arr[i];
      arr[i]=arr[i+1];
      arr[i+1]=temp;
      }
      }
      System.out.println(Arrays.toString(arr));
   if (!flag){  //表明没有交换数据，则可以直接输出数据
   break;
   } else{
     flag=false;   //重置 flag为false ,则可以方便下次的判断
   }
   }
   }

}
----------------------------------------
选择排序的代码实现
public class SelectSort{
  public static void main(String[] args){
   int[] arr=new int[]{1,9,3,2,-1};
   selectSort(arr);

  }
  public static void selectSort(int[] arr){
     int min=arr[0];
     minIndex=0;
     for (int i=0;i<arr.length-1;i++){
       minIndex=i;
       min=arr[i];
       for (int j=i+1;j<arr.length;j++){
       if (min>arr[j]){
        min=arr[j];
	 minIndex=j;
       }
       }
       if (minIndex!=i){
         arr[minIndex]=arr[i];
	 arr[i]=min;
       }
       System.out.println("第"+(i+1)+"次排序后的结果"+Arrays.toString(arr));
     }
  }
}
-------------------------------------
插入排序的代码实现
public class InsertSort{
  public static void main(Strin[] args){
  int[] arr=new int[]{101,1,3,4,-1};
      insertSort(arr);
  }
  public static void inertSort(int[] arr){
       for (int i=1;i<arr.length;i++){
       int insertVal=arr[i];
       int insertIndex=i-1;
       while(insertIndex>=0&&insertVal<arr[insertIndex]){
         arr[insertIndex+1]=arr[insertIndex];
	 insertIndex--;
       }
       if (insertIndex+1==i){

       arr[insertIndex+1]=insertVal;
       System.out.println("第"+i+"轮的排序结果是"+Arrays.toString(arr));
       }
      }
  }
}
-----------------------------------------
希尔排序的插入法式实现
public class ShellSort{
 public static void main(String[] args){
  int[] arr=new int[]{3,6,9,8,4,5,7,1,2,0};
   shellSort(arr);
 }
 public static void shellSort(int[] arr){
     int temp=0;
     int count=0;
     for (int gap=arr.length/2;gap>0;gap/=2){
         for (int i=gap;i<arr.length;i++){
	 for(int j=i-gap;j>=0;j-=gap){
	  if (arr[j]>arr[j+gap]){
	   temp=arr[j];
	   arr[j]=arr[j+gap];
	   arr[j+gap]=temp;
	  }
	 }
     }
     System.out.println("希尔排序第"+(++count)+"次排序后的结果是"+Arrays.toString(arr));
     
     }
 }
}
---------------------------------
希尔排序的移位算法实现
public static void shellSort(int[] arr){
 for (int gap=arr.length/2;gap>0;gap/=2){
   for (int i=gap;i<arr.lengtj;i++){
    int j=i;
    int temp=arr[j];
      if (arr[j]<arr[j-gap]){
      while(j-gap>=0&&temp<arr[j-gap]){
      //将arr[j-gap]的值移位到arr[j]的位置
         arr[j]=arr[j-gap];
	 j-=gap;
      }
      //当退出循环时，表明已经找到了位置
      temp=arr[j];
      }
   }
 }
}
---------------------------------
归并排序的代码实现
public class MergeSort{
  public static void main(String[] args){
   int arr[]={8,4,5,7,1,3,6,2};
   int[] temp=new int[arr.length];
   mergeSort(arr,0,arr.lemgth-1,temp);
   System.out.println(Arrays.toString(arr));

  }
  public static void mergeSort(int[] arr,int left,int right,int[] temp){
    if (left<right){
     int mid=(left+right)/2;
     mergeSort(arr,left,mid,temp);
     mergeSort(arr,mid+1,right,temp);
     merge(arr,left,mid,right,temp);
    }
  }

  //合并的方法
  public  static void merge(int[] arr,int left,int mid,int right,int[] temp){
   int i=left;
   int j=mid+1;
   int t=0;
   while (i<=mid&&j<=right){
   if (arr[i]<=arr[j]){
      temp[t]=arr[i];
      t+=1;
      i+=1;
   }else {
     temp[t]=arr[j];
     t+=1;
     j+=1;
   }
   }
   while(i<=mid){
    temp[t]=arr[i];
    t+=1；
    i+=1;
   }
   while(j<=right){
    temp[t]=arr[j];
    t+=1；
    j+=1;
   }
   int t=0;
   int tempLeft=left;
   while(tempLeft<=right){
      arr[tempLeft]=temp[t];
      t+=1；
      tempLeft+=1;
   }
  }
}
----------------------------------------------
基数排序算法的实现
public class RadixSort{
 public static void main(String[] args){
   int[] arr={1,2,3,4,5,6,78};

 }
 digitOfElement
 public static void radixSort(int[] arr){
     int max=arr[0];
     for (int i=0;i<arr.length;i++){
       if (arr[i]>max){
       max=arr[i];
       }

     }
     int maxLength=(max+"").length;
   
   int[][] bucket=new int[10][arr.length];
   int[] bucketElementCounts =new int[10];
    for (int i=0,n=1;i<maxLenth;i++,n*=10){
   for (int j=0;j<arr.length;j++){
    int digitOfElement=arr[j]/n%10;
    bucket[digitOfElement][bucketElementCounts[digitOfElement]]=arr[j];
    bucketElementCounts[digitOfElement]++;
   }
   int index=0;
   for (int k=0;k<bucketElementCounts.length;k++){
    if (bucketElementCounts[k]!=0){
      for (int l=0;l<bucketElementCounts[k];l++){
          arr[index++]=bucketELementCounts[k][l];
      }
    }
    bucketElement[k]=0;
   }
   System.out.println(Arrays.toString(arr));
 }
 }
}
-------------------------------------------------------
插值排序的代码实现
public class InsertValueSearch{
public static void main(String[] args){
  int[] arr=new int[100];
  for (int i=0;i<100;i++){
   arr[i]=i+1;
  }
  int resIndex=insertValueSearch(arr,0,arr.length-1,1);
   System.out.println("resIndex="+resIndex);
}
public static int insertValueSearch(int[] arr,int left,int right,int findVal){
  int mid=left+(right-left)*(findVal-arr[left])/(arr[right]-arr[left]);
  int midVal=arr[mid];
  if (left>right || findVal<arr[left]||findVal>arr[right]){
   return -1;
  }
  if (findVal<arr[mid]){
   return insertValueSearch(arr,left,mid-1,findVal);
  } else if (findVal>midValue){
    return insertValueSearch(arr,mid+1,right,findVal);
  } else {
   return mid;
  }
}
}
---------------------------------------------------
哈希表的代码实现
public class HashTabDemo{
 public static void main(String[] args){
 
 }
}
//编写哈希数组
class HashTab{
     private EmpLinkedList[]  empLinkedListArray;  
     public  int size;
     public HashTab(int size){
     this.size=size;
       empLinkedListArray=new EmpLinkedList[size];
     }
     public void add(Emp emp){
         int empLinkedListNO=HashFun(emp.id);
         empLinkedListArray[empLinkedListNO].addz(emp);
     }
   
     public void HashFun(int id){
       return id%size;
     }
     public void list(){
     for (int i=0;i<size;i++){
       empLInkedListArray[i].list();
     }
     }
}
class Emp{
  public int id;
  public String name;
  public Emp next;
  public Emp(int id,String name){
   super();
   this.id=id;
   this.name=name;
  }
}
//表示哈希数组
class  EmpLinkedList{
   private Emp head;
   //添加雇员
   public void add(Emp emp){
     if (head==null){
      head=emp;
      return;
      }
      Emp curemp=head;
      while(true){
           if (curemp.next==null){
	    break;
	   }
	   curemp=curemp.next;
      }
      curemp.next=emp;
     }
     //如果头链表不为空
     public void list(){
       if (head==null){
        System.out.println("链表为空，没有数据");
	return;
       }
       System.ou.println("当前链表的信息为:");
         Emp curEmp=head;
         while(true){
	  System.out.printf("=>id=%d  name=%s\t",emp.id,emp.name);
	
	  if (curEmp.next==null){
	     break;
	  }
	  curEmp=curEmp.next;
	 }
	 System.out.println();
     }
   }
  public Emp findEmpById(int id){
     if (head==null){
      System.out.println("链表为空，没有数据");
      return null;
     }
     Emp curEmp=head;
     if (curEmp.id==id){
    
       break;
     }
     if (curEmp.next==null){
      curEmp=null;
     }
     curEmp=curEmp.next;
  }
  return  curEmp;
}
---------------------------------------
顺序存储二叉树结构
public class ArrBinaryTreeDemo{
  public static void main(String[] args){
  int[] arr={1,2,3,4,5,6,7};
 ArrbinaryTree arrbinaryTree2= new ArrbinaryTree(arr);
 arrbinaryTree2.preOrder()
  }
}
class ArrbinaryTree{
 private int[] arr;
 public ArrbinaryTree(int[] arr){
 this.arr=arr;
 }
 public void preOrder(){
   this.preOrder(0);
 }
 public void preOrder(int index){
   if (arr==null||arr.length==0){
    System.out.println("顺序数组为空，无法遍历数组");
   }
    System.out.println(arr[index]);
    if ((idnex*2+1)<arr.length){
      preOrder(index*2+1);
    }
    if ((index*2+2)<arr.length){
      preOrder(index*2+2);
    }

 }
}